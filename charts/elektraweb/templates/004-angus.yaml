{{ if .Values.angus.install }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: angus-endpoints
  namespace: default
  labels:
    app.kubernetes.io/name: angus-endpoints
data:
  endpoints-client.json: |
    [
        {
            "displayName": "{{ .Values.angus.displayName }}",
            "shortName": "{{ .Values.angus.shortName }}",
            "endpoint": "https://{{ .Values.worker.host }}/",
            "defaultLang": "EN",
            "languages": ["TR","EN","DE","RU","AR","FR","RO"],
            "sendPasswordLink": true,
            "sendPasswordProcedure": "SP_EASYPMS_FORGOTPASSWORD",
            "userSettings": {
                "recordID": "settings-change-tenant",
                "menuHTML": "${angus.api.adminLevel < 99 && angus.api.tenant && angus.api.tenant.APIKEYS && JSON.parse(APIKEYS).length > 1 ? '<h2 style=\"margin: 0;\">' + TENANTNAME + '</h2>' : ''}"
            },
            "loginLabels": {
                "tenant": "Hotel Code",
                "usercode": "User Code",
                "password": "Password"
            },
            {{ if .Values.angus.logo }}
            "logo": "{{ .Values.angus.logo }}",
            {{ end }}
            "adminTwitterFeed": null,
            "useFirebaseMessaging": true,
            "showOflineModeButton": "return angus.api.getOfflineCacheData('offlineCacheEnabled')"
        }
    ]
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: angus
  namespace: default
  labels:
    k8s-app: angus
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: angus
  template:
    metadata:
      name: angus
      labels:
        k8s-app: angus
    spec:
      volumes:
        - name: endpoints
          configMap:
              name: angus-endpoints
      containers:
        - name: angus
          image: {{ .Values.angus.image }}
          volumeMounts:
            - name: endpoints
              mountPath: /usr/share/nginx/html/assets/endpoints-client.json
              subPath: endpoints-client.json
          readinessProbe:
            tcpSocket:
              port: 80
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
      imagePullSecrets:
        - name: regcred
---
kind: Service
apiVersion: v1
metadata:
  name: angus
  namespace: default
  labels:
    k8s-app: angus
spec:
  ports:
    - name: angus-port
      protocol: TCP
      port: 80
      targetPort: 80
  selector:
    k8s-app: angus
  type: ClusterIP
  sessionAffinity: None
---
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  name: angus-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: {{ .Values.ingressNginx.class }}
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
spec:
  tls:
    - hosts:
        - {{ .Values.angus.host }}
      secretName: elektraweb-cert
  rules:
    - host: {{ .Values.angus.host }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              serviceName: angus
              servicePort: 80
{{ end }}
